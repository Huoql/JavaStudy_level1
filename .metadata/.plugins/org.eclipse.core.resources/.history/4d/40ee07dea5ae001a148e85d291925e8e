<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- Spring希望管理所有的业务逻辑组件  -->
	<!-- 除控制器外全归Spring管理 -->
	<context:component-scan base-package="com.study.mybatis">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 引入外部数据库配置文件 -->
	<context:property-placeholder location="classpath:dbConfig.properties"/> 
	
	<!-- Spring用来控制业务逻辑，包括数据源、事务控制、aop -->
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	 
	 <!-- 
	 <util:properties id="dbconfig" location="classpath:dbConfig.properties"></util:properties>
	 
	 <bean id="dataSource" class="org.apache.tomcat.dbcp.dbcp2.BasicDataSource">
	 	<property name="url" value="${dbconfig.jdbc.url}"></property>
		<property name="driverClassName" value="${dbconfig.jdbc.driver}"></property>
		<property name="username" value="${dbconfig.jdbc.username}"></property>
		<property name="password" value="${dbconfig.jdbc.password}"></property>
	 </bean> 
	 -->
	
	
	<!-- Spring事务管理 -->
	<bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 开启基于注解的事务 -->
	<tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>
	
	<!-- 整合mybatis
			目的：1.由Spring来管理所有组件（mapper的实现类）
					service==>Dao   @Autowired 自动注入mapper
	 -->
	 <!-- 创建出SqlSessionFactory对象 -->
	 <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<!-- 指定数据源 ，SqlSessionFactory的所有信息以前都在mybatis全局配置文件中配置，现在都可以直接定义成该bean的property属性-->
	 	<property name="dataSource" ref="dataSource"></property>
	 	<!-- configLocation指定mybatis全局配置文件的位置 -->
	 	<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	 	<!-- 指定mapper文件的位置 -->
	 	<property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"></property>
	 </bean>
	 
	 <!-- 配置一个可以进行批量操作的sqlSession -->
	 <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	 	<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
	 	<constructor-arg name="excutorType" value="BATCH"></constructor-arg>
	 </bean>
	 
	<!-- 扫描所有的mapper接口的实现，让这些mapper能够自动注入 -->
	<!-- 
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    		<property name="basePackage" value="com.study.mybatis.dao" />
		</bean> 
	-->
	<mybatis-spring:scan base-package="com.study.mybatis.dao"/>
	
	<!-- 使AspjectJ 注解起作用：自动为匹配的类生成代理对象-->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

</beans>
