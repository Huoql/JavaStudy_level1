<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.study.mybatis.dao.EmployeeMapper2">

	<!-- 自定义某个javabean的封装规则，指导MyBatis如何将查询结果封装到对象中 -->
	<!-- type:自定义规则的java类型，将查询结果封装到哪种类型的对象中 -->
	<!-- id: 唯一id方便引用，自定义-->
	<resultMap type="com.study.mybatis.bean.Employee" id="MySimpleEmp">
		<!-- id节点：用于配置主键字段的值的封装  id节点来定义主键底层会有优化，用result节点也行，推荐用id节点-->
	    <!-- column：查询结果中的列名 -->
	    <!-- property：要封装到的属性名 -->
    	<id column="id" property="id" />
    	<!-- result节点：用于配置非主键字段的值的封装，column和property属性同上-->
    	<result column="last_name" property="lastName"/>
    	<!-- 其他不指定的列会自动封装，但推荐只要写了resultMap就把全部的映射规则写上 -->
    	<result column="gender" property="gender"/>
    	<result column="email" property="email"/>
	</resultMap>


	<!-- resultMap:自定义结果集映射规则 -->
	<!-- public Employee getEmpById(Integer id); -->
	<select id="getEmpById" resultMap="MySimpleEmp">
		select * from tbl_employee where id = #{id}
	</select>
	
	<!-- 
		场景一：
			查询Employee的同时查询员工对应的部门        Employee======Department
			一个员工有与之对应的部门信息
	 -->
	 
	 <!-- 联合查询：级联属性封装结果集 -->
	 <resultMap type="com.study.mybatis.bean.Employee" id="MyDiffEmp">
	 	<id column="id" property="id"/>
	 	<result column="last_name" property="lastName"/>
	 	<result column="gender" property="gender"/>
	 	<result column="email" property="email"/>
	 	<result column="did" property="dept.id"/>
	 	<result column="dept_name" property="dept.departmentName"/>
	 </resultMap>
	 
	 <!-- 使用association定义单个关联对象的封装规则 -->
	 <resultMap type="com.study.mybatis.bean.Employee" id="MyDiffEmp2">
	 	<id column="id" property="id"/>
	 	<result column="last_name" property="lastName"/>
	 	<result column="gender" property="gender"/>
	 	<result column="email" property="email"/>
	 	<!-- association 可以指定联合的javaBean对象 -->
	 	<!-- property="dept" 指定哪个属性是联合的对象 -->
	 	<!-- javaType 指定这个属性对象的类型（不能省略） -->
	 	<association property="dept" javaType="com.study.mybatis.bean.Department">
	 		<id column="did" property="id"/>
	 		<result column="dept_name" property="departmentName"/>
	 	</association>
	 </resultMap>
	 
	 <!-- public Employee getEmpAndDept(Integer id); -->
	 <select id="getEmpAndDept" resultMap="MyDiffEmp2">
	 	SELECT
			a.*,
			b.id did,
			b.dept_name
		FROM
			tbl_employee a,
			tbl_dept b 
		WHERE
			a.d_id = b.id 
			AND a.id = #{id}
	 </select>
	 
	 <!-- 使用association进行分步查询：
		1、先按照员工id查询员工信息
		2、根据查询员工信息中的d_id值去部门表查出部门信息
		3、部门设置到员工中；
	 -->
	 <!--  id  last_name  email   gender    d_id   -->
	 <resultMap type="com.study.mybatis.bean.Employee" id="MyEmpByStep">
	 	<id column="id" property="id"/>
	 	<result column="last_name" property="lastName"/>
	 	<result column="email" property="email"/>
	 	<result column="gender" property="gender"/>
	 	<!-- association定义关联对象的封装规则 -->
	 	<!-- select:表明当前属性是调用select指定的方法查出的结果 -->
	 	<!-- column:指定将哪一列的值传给这个方法 -->	
	 	<!-- 流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性 -->
 		<association property="dept" 
	 		select="com.study.mybatis.dao.DepartmentMapper.getDeptById"
	 		column="d_id">
 		</association>
	 </resultMap>
	 
	 <!-- public Employee getEmpByIdStep(Integer id); -->
	 <select id="getEmpByIdStep" resultMap="MyEmpByStep">
	 	select * from tbl_employee where id = #{id}
	 </select>
	 
	 <!-- 可以使用延迟加载（懒加载）；(按需加载)
	 	Employee==>Dept：
	 		不使用：我们每次查询Employee对象的时候，都将一起查询出来。
	 		使用：    部门信息在我们使用的时候再去查询；
	 		只需要在分步查询的基础之上加上两个配置（全局配置文件中加）：
	 		<setting name="lazyLoadingEnabled" value="true"/>
			<setting name="aggressiveLazyLoading" value="false"/>
	  -->
	  
	  
	  <!-- ============================================================================== -->
    <!-- 
	场景二：
		查询部门的时候将部门对应的所有员工信息也查询出来：注释在DepartmentMapper.xml中
	-->
	<!-- public List<Employee> getEmpsByDeptId(); -->
	<select id="getEmpsByDeptId" resultType="com.study.mybatis.bean.Employee">
		select * from tbl_employee where d_id = #{id}
	</select>
	  
	
</mapper>